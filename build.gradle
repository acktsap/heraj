/*
 * @copyright defined in LICENSE.txt
 */

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    google()
    mavenCentral()
  }
  dependencies {
    classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.7"
    classpath "gradle.plugin.io.morethan.jmhreport:gradle-jmh-report:0.8.0"
    classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
    classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+"
  }
}
group 'io.aergo'

repositories {
  mavenLocal()
  maven {
    url "http://dist.wso2.org/maven2"
  }
  mavenCentral()
  jcenter()
}

allprojects {
  group 'io.aergo'
  version '1.0-SNAPSHOT'
}
def javaProjects = [
  project('core:annotation'),
  project('core:util'),
  project('core:common'),
  project('core:protobuf'),
  project('core:transport'),
  project('client:wallet'),
  project('client:smart-contract')
]

def jmhProjects = [
  project('core:common'),
  project('core:transport'),
  project('client:wallet'),
]

def exampleProjects = [
  project('examples')
]

ext {
  grpcVersion = '1.13.1'
  guavaVersion = '22.0'
}

configure(javaProjects) {
  // do Java specific configurations
  apply plugin: 'java'
  apply plugin: 'maven-publish'
  apply plugin: 'jacoco'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.hierynomus.license-report'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'com.jfrog.bintray'


  def projectBaseName = 'heraj-' + project.name

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  repositories {
    mavenLocal()
    maven {
      url "http://dist.wso2.org/maven2"
    }
    mavenCentral()
    jcenter()
  }
  eclipseJdt.doLast( {
    ant.propertyfile(file: ".settings/org.eclipse.core.resources.prefs") {
      ant.entry(key: "eclipse.preferences.version", value: "1")
      ant.entry(key: "encoding/<project>", value: "utf8")
    }
  } )

  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }

  compileJava.options.encoding = 'UTF-8'
  compileTestJava.options.encoding = 'UTF-8'

  dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.2'
    implementation 'org.slf4j:slf4j-api:1.7.25'

    runtime 'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'org.projectlombok:lombok:1.18.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation('org.powermock:powermock-api-mockito2:2.0.0-beta.5') {
      exclude group: 'org.mockito', module: 'mockito-core'
    }
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0-beta.5'
  }

  project.ext.jacocoOfflineSourceSets = [ 'main' ]
  task instrument(dependsOn: [classes, project.configurations.jacocoAnt]) {
    inputs.files classes.outputs.files
    File outputDir = new File(project.buildDir, 'instrumentedClasses')
    outputs.dir outputDir
    doFirst {
      project.delete(outputDir)
      ant.taskdef(
          resource: 'org/jacoco/ant/antlib.xml',
          classpath: project.configurations.jacocoAnt.asPath,
          uri: 'jacoco'
      )
      def instrumented = false
      jacocoOfflineSourceSets.each { sourceSetName ->
        if (file(sourceSets[sourceSetName].output.classesDir).exists()) {
          def instrumentedClassedDir = "${outputDir}/${sourceSetName}"
          ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
            fileset(dir: sourceSets[sourceSetName].output.classesDir, includes: '**/*.class')
          }
          //Replace the classes dir in the test classpath with the instrumented one
          sourceSets.test.runtimeClasspath -= files(sourceSets[sourceSetName].output.classesDir)
          sourceSets.test.runtimeClasspath += files(instrumentedClassedDir)
          instrumented = true
        }
      }
      if (instrumented) {
        //Disable class verification based on https://github.com/jayway/powermock/issues/375
        test.jvmArgs += '-noverify'
      }
    }
  }
  test.dependsOn instrument

  test {
    if(JavaVersion.current().isJava9Compatible()) {
      jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.math=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.nio=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.util=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.util.stream=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.base/java.io=ALL-UNNAMED')
      jvmArgs('--add-opens', 'java.xml/jdk.xml.internal=ALL-UNNAMED')
    }


    maxParallelForks = Math.max(1, Runtime.runtime.availableProcessors())
    exclude '**/*Tests.class'
    exclude '**/*IT.class'
  }

  checkstyle {
    project.ext.checkstyleVersion = '8.11'
    project.ext.sevntuChecksVersion = '1.26.0'
    sourceSets = [project.sourceSets.main]

    ignoreFailures = true
    configFile = file("${rootProject.projectDir}/styles.xml")
    reportsDir = file("${buildDir}/checkstyle-reports")
    configurations {
      checkstyle
    }
    checkstyleMain {
      reportsDir = checkstyle.reportsDir
    }
    dependencies{
      assert project.hasProperty("checkstyleVersion")

      checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
      checkstyle "com.github.sevntu-checkstyle:sevntu-checks:${sevntuChecksVersion}"
    }
  }

  jar {
    archivesBaseName = projectBaseName
  }

  task install {
    dependsOn publishToMavenLocal
  }

  task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
  }
  javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
      options.addBooleanOption('html5', true)
    }
  }

  task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
  }

  publishing {
    publications {
      maven(MavenPublication) {
        groupId = project.group
        artifactId = projectBaseName
        version = project.version

        from components.java
        artifact sourceJar
        artifact javadocJar
      }
    }
  }

  bintray {
    user = System.getProperty("bintrayUser")
    key = System.getProperty("bintrayKey")
    pkg {
      userOrg = System.getProperty("bintrayUser")
      repo = 'maven'
      name = 'heraj-' + project.name
      licenses = ['MIT']
      websiteUrl = 'https://github.com/aergoio/heraj'
      vcsUrl = 'https://github.com/aergoio/heraj'
      version {
        name = project.version
        vcsTag = project.version
      }
    }
    publications = ['maven']
  }

  jacoco {
    toolVersion = "0.8.2"
  }
  jacocoTestReport {
    group = "Reporting"
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output.classesDir)
    reports {
      xml.enabled true
      html.enabled true
      csv.enabled false
    }
  }
}

configure(exampleProjects) {
  // do Java specific configurations
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  repositories {
    mavenLocal()
    maven {
      url "http://dist.wso2.org/maven2"
    }
    mavenCentral()
    jcenter()
  }
  eclipseJdt.doLast( {
    ant.propertyfile(file: ".settings/org.eclipse.core.resources.prefs") {
      ant.entry(key: "eclipse.preferences.version", value: "1")
      ant.entry(key: "encoding/<project>", value: "utf8")
    }
  } )

  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }

  compileJava.options.encoding = 'UTF-8'
  compileTestJava.options.encoding = 'UTF-8'

  checkstyle {
    project.ext.checkstyleVersion = '8.11'
    project.ext.sevntuChecksVersion = '1.26.0'
    sourceSets = [project.sourceSets.main]

    ignoreFailures = true
    configFile = file("${rootProject.projectDir}/styles.xml")
    reportsDir = file("${buildDir}/checkstyle-reports")
    configurations {
      checkstyle
    }
    checkstyleMain {
      reportsDir = checkstyle.reportsDir
    }
    dependencies{
      assert project.hasProperty("checkstyleVersion")

      checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
      checkstyle "com.github.sevntu-checkstyle:sevntu-checks:${sevntuChecksVersion}"
    }
  }
}

task alljavadoc(type: Javadoc) {
  source javaProjects.findAll{ it.name != 'protobuf' }.collect { it.sourceSets.main.allJava }    											  
  classpath = files(javaProjects.collect { it.sourceSets.main.compileClasspath })
  destinationDir = file("${buildDir}/docs/javadoc")
  if (JavaVersion.current().isJava8Compatible()) {
    options.addStringOption('Xwerror', '-quiet')
  }
  if(JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}

apply plugin: 'java'
apply plugin: 'jacoco'
jacoco {
  toolVersion = "0.8.2"
}

task alljacoco(type: JacocoReport) {
  dependsOn = javaProjects.test
  sourceDirectories = files(javaProjects.sourceSets.main.allSource.srcDirs)
  classDirectories =  files(javaProjects.sourceSets.main.output.classesDir)
  def executionDataPath = []
  executionData = files((javaProjects.findAll { p ->
    def coverageFileLocation = "$p.buildDir/jacoco/test.exec"
    new File(coverageFileLocation).exists()
  }).jacocoTestReport.executionData)
  reports {
    html.enabled = true
    xml.enabled = true
    xml.destination file("${buildDir}/reports/jacoco/report.xml")
    csv.enabled = false
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ['types/**'])
    })
  }
}

configure(jmhProjects) {
  apply plugin: "me.champeau.gradle.jmh"
  apply plugin: "io.morethan.jmhreport"

  eclipse {
    classpath {
      plusConfigurations.add(configurations.jmhCompile)
      defaultOutputDir = file('build/classes-jmh-ide')
    }
  }
  sourceSets {
    jmh {
      compileClasspath += sourceSets.main.output + sourceSets.test.output + sourceSets.main.compileClasspath
      runtimeClasspath += configurations.jmh + sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    }
  }

  dependencies {
    jmhCompile project
    jmhCompile 'org.openjdk.jmh:jmh-core:1.21'
    jmhCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.21'

    jmhRuntime 'org.slf4j:jul-to-slf4j:1.7.25'
  }

  jmh {
    duplicateClassesStrategy = 'warn'
    resultFormat = 'JSON'
    benchmarkMode = ['thrpt']
    timeUnit = 's'
    include += '.*Benchmark'
    threads = 8
    fork = 2
  }
  jmhReport {
    jmhResultPath = project.file('build/reports/jmh/results.json')
    jmhReportOutput = project.file('build/reports/jmh')
  }
}
